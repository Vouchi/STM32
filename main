/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  *
  * @author			Michał Kozłowski
  *
  * @brief          Ten plik pozwala na odczyt napięcia z przetwornika ADC,
  * 		    zapisanie danych w rejestrach dla danej chwili czasowej,
  * 		    oraz obsługę i przesył danych przez UART z urzyciem bufora
  * 		    cyrkulacyjnego.
  *
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */


/* Rozmiar bufora cyrkulacyjnego, należy dobrać do swoich należy dobrać do
swoich potrzeb. UWAGA!!! jego zbyt duży rozmiar może wpływać na opóźnienie
pomiędzy danymi przesyłanymi przez uart a danymi z aktualnej chwili czasowej  */

#define BUFF_SIZE 50

/* Rozmiar struktury danych służacej do zapisu infomacji */

#define DATA_SIZE 1000

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
 ADC_HandleTypeDef hadc1;

RTC_HandleTypeDef hrtc;

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */

uint8_t lag;

uint8_t prevSysTickCount = 0;
uint8_t emptyBufferError;

uint8_t readyADC;
uint8_t rawDataADC;

uint8_t transmissionEnd;
uint8_t transmissionPending;

char bufferDataFrame[10];
char recived_char[1];
char buffer[BUFF_SIZE];

typedef struct {
    char * const buffer;
    uint8_t head;
    uint8_t tail;
} circ_buffer_t;

struct Data_t {
	uint8_t currentIteration;
	uint8_t sysTickCount[DATA_SIZE];
	uint8_t voltageValue[DATA_SIZE];
};

struct Data_t Data = { .currentIteration = 0 , .sysTickCount[0] = 0 , .voltageValue[0] = 0 };

circ_buffer_t circBuff = { buffer, 1, 0 };

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_RTC_Init(void);
/* USER CODE BEGIN PFP */
size_t strlen(const char *str);
void Set_RTC_Time (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Obsługa przerwania od końca odbioru znaków przez UART //

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART3) {

		if(recived_char[0]=='b'||'r') HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
		if(recived_char[0]=='s') HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);

		transmissionPending = 1;

		HAL_UART_Receive_IT(&huart3,(uint8_t *)recived_char,1);
	}
}

// Obsługa przerwania od końca transmisji przez UART //

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	transmissionEnd = 1;
}

// Obsługa przerwania od końca konwersji ADC //

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
	rawDataADC = HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop_IT(&hadc1);
    readyADC = 1;
}

/*
 * Funkcja dodająca N znaków na początek bufora
 *
 * @param q wskaźnik do struktury typu circ_buffer_t do której będziemy wpisywać znaki
 * @param data wskaźnik do tablicy ze znakami
 * @param N zmienna określająca ilość wpisywanych znaków z tablicy do bufora
 *
 */

void Circ_Buffer_Put_N_Char(circ_buffer_t *q, uint8_t *data, uint8_t N)
{
	uint8_t head_temp;
	uint32_t n;

	for (n = 0 ; n < N; n++) {

		head_temp = q->head + 1;

		if ( head_temp == BUFF_SIZE ) head_temp = 0;

		q->buffer[head_temp] = data[n];
		q->head = head_temp;
	}
}

/*
 * Funkcja usuwająca ostatni znak z bufora
 *
 * @param q wskaźnik do struktury typu circ_buffer_t z której usuwamy znak
 *
 */

uint8_t Circ_Buffer_Clear_Char(circ_buffer_t *q)
{
	if (q->head == q->tail) return 1;
	q->tail++;
	if (q->tail == BUFF_SIZE) q->tail = 0;

	return 0;
}


/*
 * Funkcja obsługująca odbieranie danych przez UART
 *
 * W przypadku gdy odebrany znak = r, resetujemy bufor cyrkulacyjny
 * W przypadku gdy odebrany znak = b, zatrzymujemy wysyłanie danych
 * Jeśli odebrany znak = s, rozpoczynamy normalne działanie programu
 *
 */

void Recive_Data (void)
{
	transmissionPending = 0;

	switch (recived_char[0]) {

		case 'r':

			HAL_UART_Receive_IT(&huart3,(uint8_t *)recived_char,1);

			transmissionEnd = 0;
			readyADC = 0;
			circBuff.head = 0;
			circBuff.tail = 0;
			while (recived_char[0]!='s') { /* DO NOTHING */ }
			transmissionEnd = 1;
			HAL_ADC_Start_IT(&hadc1);
			break;

		case 'b':

			HAL_UART_Receive_IT(&huart3,(uint8_t *)recived_char,1);

			transmissionEnd = 0;
			readyADC = 0;
			while (recived_char[0]!='s') { /* DO NOTHING */ }
			transmissionEnd = 1;
			HAL_ADC_Start_IT(&hadc1);
			break;

		default:
			break;
	}
}

/*
 * Funkcja przesyłająca dane przez UART
 *
 * @param q wskaźnik do struktury typu circ_buffer_t z której
 * prześlemy dane przez UART
 *
 */

void Transmit_Data (circ_buffer_t *q)
{
	memset(bufferDataFrame , 0 , 10);

	if (emptyBufferError == 0) { 		// Sprawdzam czy w buforze są dane

		uint8_t i = 0;
		uint8_t index = (q->tail) + 1;

		do {
			if (index == 50) index = 0;
			bufferDataFrame[i] = q->buffer[index];
			i++;
			index++;
		} while (q->buffer[(q->tail) + i] != 'T');

		HAL_UART_Transmit_IT(&huart3, (uint8_t*)bufferDataFrame, i);

		while (i > 0) {
			emptyBufferError = Circ_Buffer_Clear_Char(&circBuff);
			i--;
		}

		transmissionEnd = 0;

	} else transmissionEnd = 1;
}

/*
 * Funkcja konwertująca ostatni odczyt ze struktury typu Data_t do ramki danych
 *
 */

void Convert_and_Load_Data(void)
{
	memset(bufferDataFrame , 0 , 10);

	uint8_t head = circBuff.head;
	uint8_t tail = circBuff.tail;

	uint8_t lag = 0;
	uint8_t i;

	for (i = 0 ; i <= 9 ; i++) {			// Sprawdzam czy po dodaniu danych bufor
		head++;					// będzie przepełniony, UWAGA!!! Nieoptymalne
		if (head == BUFF_SIZE) head = 0;	// dla danych o dużej ilości znaków
		if (head == tail) lag = 1;
	}

	if (lag == 0) {

		uint32_t i = Data.currentIteration;
		uint8_t dt;

		dt = prevSysTickCount - Data.sysTickCount[i];
		prevSysTickCount = Data.sysTickCount[i];

		itoa(rawDataADC,bufferDataFrame,10);
		uint8_t dataLength = strlen(bufferDataFrame);
		itoa(dt,bufferDataFrame+dataLength+1,10);

		bufferDataFrame[dataLength] = 'V';
		bufferDataFrame[strlen(bufferDataFrame)] = 'T';

		dataLength = strlen(bufferDataFrame);
		Circ_Buffer_Put_N_Char(&circBuff , (uint8_t *)&bufferDataFrame , dataLength);
	}

	emptyBufferError = 0;
}

/*
 * Funkcja zapisująca dane do pól struktury
 *
 * @param c wskaźnik do struktury typu Data_t do której zapisujemy dane
 *
 */

void Save_Data(struct Data_t* c)
{
	uint32_t i = (c->currentIteration);

	c->voltageValue[i] = rawDataADC;
	c->sysTickCount[i] = HAL_GetTick();
	c->currentIteration = i+1;

	readyADC = 0;
}

void Run_ADC(void)
{
	Save_Data(&Data);
	Convert_and_Load_Data();
	HAL_ADC_Start_IT(&hadc1);
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART3_UART_Init();
  MX_ADC1_Init();
  MX_RTC_Init();
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3,(uint8_t *)recived_char,1);

  uint32_t l;

  // Inicjalizacja bufora cyrkulacyjnego 3 pomiarami

  for (l = 0 ; l < 3 ; l++) {

	  HAL_ADC_Start(&hadc1);
	  rawDataADC = HAL_ADC_GetValue(&hadc1);
	  Save_Data(&Data);
	  Convert_and_Load_Data();
  }

  HAL_ADC_Start_IT(&hadc1);
  transmissionEnd = 1;

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if (readyADC == 1) Run_ADC();
	  if (transmissionPending == 1) Recive_Data();
	  if (transmissionEnd == 1) Transmit_Data(&circBuff);
	  if (lag >= 100) {

		  HAL_UART_Abort(&huart3);
		  bufferDataFrame[0] = 's';
		  HAL_UART_Transmit(&huart3, (uint8_t *)bufferDataFrame, 1, 10);
	  }

	  // HAL_Delay(1);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 240;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 5;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
